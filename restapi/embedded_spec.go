// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "User API",
    "title": "User API",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/mon/ping": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Health OK",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "OK"
                }
              }
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get a list of user",
        "operationId": "UserList",
        "parameters": [
          {
            "type": "string",
            "name": "first_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "last_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "nickname",
            "in": "query"
          },
          {
            "type": "string",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "name": "country",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetUserListResponse"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a user",
        "operationId": "UserCreate",
        "parameters": [
          {
            "description": "User to create",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCreateUserParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by it's ID",
        "operationId": "UserGet",
        "parameters": [
          {
            "type": "string",
            "description": "ID of user to return",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update an existing user",
        "operationId": "UserUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "ID of user",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "user data",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a user",
        "operationId": "UserDelete",
        "parameters": [
          {
            "type": "string",
            "description": "User id to delete",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully"
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GetUserListResponse": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "meta": {
          "properties": {
            "this": {
              "type": "string"
            },
            "total": {
              "type": "string"
            }
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "PostCreateUserParams": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "email",
        "password"
      ],
      "properties": {
        "country": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "email"
      ],
      "properties": {
        "country": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  },
  "tags": [
    {
      "description": "handle users",
      "name": "user"
    },
    {
      "description": "monitoring",
      "name": "monitoring"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "User API",
    "title": "User API",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/mon/ping": {
      "get": {
        "tags": [
          "monitoring"
        ],
        "summary": "Health check",
        "responses": {
          "200": {
            "description": "Health OK",
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "default": "OK"
                }
              }
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "get a list of user",
        "operationId": "UserList",
        "parameters": [
          {
            "type": "string",
            "name": "first_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "last_name",
            "in": "query"
          },
          {
            "type": "string",
            "name": "nickname",
            "in": "query"
          },
          {
            "type": "string",
            "name": "email",
            "in": "query"
          },
          {
            "type": "string",
            "name": "country",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/GetUserListResponse"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Add a user",
        "operationId": "UserCreate",
        "parameters": [
          {
            "description": "User to create",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PostCreateUserParams"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/v1/user/{userId}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by it's ID",
        "operationId": "UserGet",
        "parameters": [
          {
            "type": "string",
            "description": "ID of user to return",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update an existing user",
        "operationId": "UserUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "ID of user",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "description": "user data",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Deletes a user",
        "operationId": "UserDelete",
        "parameters": [
          {
            "type": "string",
            "description": "User id to delete",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted successfully"
          },
          "default": {
            "description": "Error handling the request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "GetUserListResponse": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "meta": {
          "properties": {
            "this": {
              "type": "string"
            },
            "total": {
              "type": "string"
            }
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "GetUserListResponseMeta": {
      "properties": {
        "this": {
          "type": "string"
        },
        "total": {
          "type": "string"
        }
      }
    },
    "PostCreateUserParams": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "email",
        "password"
      ],
      "properties": {
        "country": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "email"
      ],
      "properties": {
        "country": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "nickname": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      }
    }
  },
  "tags": [
    {
      "description": "handle users",
      "name": "user"
    },
    {
      "description": "monitoring",
      "name": "monitoring"
    }
  ]
}`))
}
