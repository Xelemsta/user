// Code generated by go-swagger; DO NOT EDIT.

package monitoring

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetMonPingHandlerFunc turns a function with the right signature into a get mon ping handler
type GetMonPingHandlerFunc func(GetMonPingParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetMonPingHandlerFunc) Handle(params GetMonPingParams) middleware.Responder {
	return fn(params)
}

// GetMonPingHandler interface for that can handle valid get mon ping params
type GetMonPingHandler interface {
	Handle(GetMonPingParams) middleware.Responder
}

// NewGetMonPing creates a new http.Handler for the get mon ping operation
func NewGetMonPing(ctx *middleware.Context, handler GetMonPingHandler) *GetMonPing {
	return &GetMonPing{Context: ctx, Handler: handler}
}

/*
	GetMonPing swagger:route GET /mon/ping monitoring getMonPing

Health check
*/
type GetMonPing struct {
	Context *middleware.Context
	Handler GetMonPingHandler
}

func (o *GetMonPing) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetMonPingParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetMonPingOKBody get mon ping o k body
//
// swagger:model GetMonPingOKBody
type GetMonPingOKBody struct {

	// status
	Status *string `json:"status,omitempty"`
}

// Validate validates this get mon ping o k body
func (o *GetMonPingOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get mon ping o k body based on context it is used
func (o *GetMonPingOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetMonPingOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetMonPingOKBody) UnmarshalBinary(b []byte) error {
	var res GetMonPingOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
