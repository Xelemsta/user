// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUserListParams creates a new UserListParams object
//
// There are no default values defined in the spec.
func NewUserListParams() UserListParams {

	return UserListParams{}
}

// UserListParams contains all the bound params for the user list operation
// typically these are obtained from a http.Request
//
// swagger:parameters UserList
type UserListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: query
	*/
	Country *string
	/*
	  In: query
	*/
	Email *string
	/*
	  In: query
	*/
	FirstName *string
	/*
	  In: query
	*/
	LastName *string
	/*
	  In: query
	*/
	Nickname *string
	/*
	  In: query
	*/
	Page *int64
	/*
	  In: query
	*/
	PerPage *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUserListParams() beforehand.
func (o *UserListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCountry, qhkCountry, _ := qs.GetOK("country")
	if err := o.bindCountry(qCountry, qhkCountry, route.Formats); err != nil {
		res = append(res, err)
	}

	qEmail, qhkEmail, _ := qs.GetOK("email")
	if err := o.bindEmail(qEmail, qhkEmail, route.Formats); err != nil {
		res = append(res, err)
	}

	qFirstName, qhkFirstName, _ := qs.GetOK("first_name")
	if err := o.bindFirstName(qFirstName, qhkFirstName, route.Formats); err != nil {
		res = append(res, err)
	}

	qLastName, qhkLastName, _ := qs.GetOK("last_name")
	if err := o.bindLastName(qLastName, qhkLastName, route.Formats); err != nil {
		res = append(res, err)
	}

	qNickname, qhkNickname, _ := qs.GetOK("nickname")
	if err := o.bindNickname(qNickname, qhkNickname, route.Formats); err != nil {
		res = append(res, err)
	}

	qPage, qhkPage, _ := qs.GetOK("page")
	if err := o.bindPage(qPage, qhkPage, route.Formats); err != nil {
		res = append(res, err)
	}

	qPerPage, qhkPerPage, _ := qs.GetOK("per_page")
	if err := o.bindPerPage(qPerPage, qhkPerPage, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCountry binds and validates parameter Country from query.
func (o *UserListParams) bindCountry(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Country = &raw

	return nil
}

// bindEmail binds and validates parameter Email from query.
func (o *UserListParams) bindEmail(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Email = &raw

	return nil
}

// bindFirstName binds and validates parameter FirstName from query.
func (o *UserListParams) bindFirstName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FirstName = &raw

	return nil
}

// bindLastName binds and validates parameter LastName from query.
func (o *UserListParams) bindLastName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.LastName = &raw

	return nil
}

// bindNickname binds and validates parameter Nickname from query.
func (o *UserListParams) bindNickname(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Nickname = &raw

	return nil
}

// bindPage binds and validates parameter Page from query.
func (o *UserListParams) bindPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("page", "query", "int64", raw)
	}
	o.Page = &value

	return nil
}

// bindPerPage binds and validates parameter PerPage from query.
func (o *UserListParams) bindPerPage(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("per_page", "query", "int64", raw)
	}
	o.PerPage = &value

	return nil
}
