version: '3'
services:
  api:
    image: user-api
    build:
      context: ./
      dockerfile: ./api/Dockerfile
    ports:
      - 3000:3000
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    volumes:
      - ./db/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql:ro
      - ./db/create_extensions.sql:/docker-entrypoint-initdb.d/create_extensions.sql:ro
    command: ["postgres", "-c", "log_statement=all"]
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - 9092:9092
      - 29092:29092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    command: sh -c "((sleep 15 && kafka-topics --create --bootstrap-server kafka:29092 --replication-factor 1 --partitions 3 --topic user)&) && /etc/confluent/docker/run "
